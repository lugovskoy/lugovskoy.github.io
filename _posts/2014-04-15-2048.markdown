---
layout: post
title: "Musings on 2048"
date: 2014-04-15 22:21:25
---

On the 5th of March 2014, [Gabriele Cirulli][gabrielecirulli] pushed the initial commit of [2048][2048] to GitHub. It seems that this game is the next "new thing" after Flappy Bird. [Oh well.][flappy2048]

You know that the game is popular when your teachers at school play the game during break. You see everybody asking each other if they have reached 2048 or not. I think that it is trivial to reach 2048, but the game interests me mathematically. It seems that everybody has an idea about the best strategy, the basic algorithms and the highest possible tile, the highest possible score, etc.

So,

* what is the highest tile achievable on a NxN grid?
* what is the highest achievable score on a NxN grid?
* is 2048 a solved game?
* is an infinite game possible?
* are there strategies/algorithms for this game?

etc. are questions that many people ask. In this post, I'll try my best to give an answer.

# The highest tile achievable on a NxN grid

If {% m %} a {% em %} is the highest naturally spawning tile, that is, the highest "new tile" you get after a move, and N is the number of rows/columns in the grid, then the formula for the largest value tile is:

{% math %}
2^{N^2-1} \cdot a
{% endmath %}

This formula assumes a perfect RNG sequence where every spawning tile is the maximum possible (for example, in the original game, imagine you always got 4). That way, you can start tiling up to {% m %} N^2 - 1 {% em %} blocks (until the game ends), and if you start tiling with blocks of {% m %} a {% em %}, ... it looks like we proved our formula. :)

So, for a normal game in a 4x4 grid, with 4 being the highest possible naturally spawning tile, the highest tile achievable is {% m %} 2^{4^2 - 1} \cdot 4 = 131072 {% em %}, which is {% m %} 2^{17} {% em %}.

Therefore, an infinite game is not possible.

*N.B.* This also demonstrates that the naturally spawning tiles are of high importance. If you zigzagged the entire grid with powers of 2, and have one empty tile remaning in the corner, to win the game, you would need to get 4. Getting 2 will end the game immediately, and the highest tile you've achieved will be {% m %} 2^{16} = 65536 {% em %}. But, with 4, you would arrive to the result above.

# The highest score achievable on a NxN grid

Now this is a little more tricky. We need to understand how scoring works. Consider this:

* Creating a 2 tile will give you no points
* Creating a 4 tile will give you 4 points
* Creating a 8 tile will give you 8 + 4 + 4 = 16 points
* Creating a 16 tile will give you 16 + 8 + 8 + 4 + 4 = 48 points
* ... and so on.

Equivalently,

* Creating a tile of level 1 = {% m %} 0 \cdot 2^1 {% em %} points
* Creating a tile of level 2 = {% m %} 1 \cdot 2^2 {% em %} points
* Creating a tile of level 3 = {% m %} 2 \cdot 2^3 {% em %} points
* Creating a tile of level 4 = {% m %} 3 \cdot 2^4 {% em %} points
* ... and so on.

So, making a tile of level n gives you {% m %} (n - 1) \cdot 2^n {% em %} points. We already know that the tile of highest level is level 17. We're going to fill the entire grid with tiles of high levels. So, a tile of the 17th level, a tile of the 16th level, a tile of the 15th level, ... a tile of the 8th level, and we stop there. There's a little exception here (as we are nearing the end). If we wanted to create a single 131,072 tile, we would need 65,536 of the small tiles of first level (the twos). If we wanted to create a 2048 tile, we would need 1024 '2' tiles. To create this 8, we'll use two '2' tiles, and a last '4' tile. Now, instead of using the '4' tiles, we used '2's, so we subtract 4 points.

Now we have filled the entire grid except for one block. But we are not going to take it in our equation, as it cannot be merged with the 8.

{% math %}
\sum_{n=3}^{17} \big( (n - 1) \cdot 2^n \big) - 4
{% endmath %}

and, after doing the calculations, we get 3,932,156 points. For this, we spawned a total of 131,070 tiles. If you made a single legal move in one second, it would take you roughly 36.4 hours to reach the highest possible score!

# Is 2048 a solved game?

Even if the tiles spawned at really, really bad locations, would you still be able to win? Well, try to get to 512 in this 2048 variant: [Evil 2048.][evil2048] It's a much more fun challenge than the original game. I don't think any of us mere mortals are going to reach beyond 512, but, if you are able to predict where things will spawn, you can feel nice.

And then, play this variant: [Deterministic 2048][det2048]. It's like an ideal 2048, there's no randomness, it is deterministic and you can calculate your moves until the end of the game. Examination of the beauty of this game is left to the readers as an exercise. :P It's like the ideal gases, which purposely satisfy the equation

{% math %}
PV = nRT
{% endmath %}

# Strategies for 2048

It seems that everybody knows that cornering your highest tiles is a good strategy, and believe me, it is. In the beginning of the game, you treat your tiles as tetris blocks. Build a base of 4 tiles on the bottom row and build on top of it (but don't you dare press up, trying to turn the tiles - it will break your base at the bottom! :p). Slowly, (and especially) after getting 2048, the game will turn into "securing a spiral". You will have to make a perfect spiral for the higher levels of tiles. With luck, you can even get 131,072!

You can totally devise an algorithm for the deterministic variant (even of different grid sizes). But for the original one, I cannot currently see the path for a (human-applicable) algorithm that can solve the game. Just look at Evil 2048, and try your best at an algorithm - what can you do?

I think that the mathematical questions underlying in the game are much more entertaining than the actual game. I hope this post will be useful to the 2048-nerds and hopefully bring an answer to the endless discussion of "the highest tile achievable".

Happy math :)

[gabrielecirulli]: https://github.com/gabrielecirulli
[2048]: https://github.com/gabrielecirulli/2048
[flappy2048]: http://hczhcz.github.io/Flappy-2048
[evil2048]: http://aj-r.github.io/Evil-2048/
[det2048]: http://jmfork.github.io/2048/

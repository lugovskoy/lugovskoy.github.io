---
layout: post
title:  "ii: irc it"
date:   2014-03-29 18:19:25
---

Doug McIlroy summarized the Unix philosophy as follows:

> This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.

[ii][ii] is a perfect example for such programs. While being one of the tiniest IRC clients (well, we have [sic][sic], also from [suckless.org][suckless]), a set of _little_ programs can extend its functionality to the level of, for example, irssi or weechat.

ii is a very original IRC client. From their website:

> ii is a minimalist FIFO and filesystem-based IRC client. It creates an irc directory tree with server, channel and nick name directories. In every directory a FIFO in file and a normal out file is created. The in file is used to communicate with the servers and the out files contain the server messages. For every channel and every nick name there are related in and out files created. This allows IRC communication from command line and adheres to the Unix philosophy.

In this post, we are going to explore ii. In the end, our IRC setup will look like this:

[![ii screenshot][iiscrot]][iiscrot]

So let's begin!

## Getting ii

Follow these steps:

* Download [ii][ii].
* (optional) Apply [SSL patch][sslpatch] to ii. If you get an error, like I did, use [this][sslpatch2] SSL patch as an alternative.
* Build and install ii: `# make install clean`.

Now you are ready to test if ii works.

## Using ii like a caveman

Now we are going to use ii like a caveman.

{% highlight bash %}
ii -n berk -e ssl -s irc.nixers.net &
cd "~/irc/irc.nixers.net/"
echo "/j #nixers" > in
tail out # check for errors, etc.
cd "#nixers/"
tail out
echo "hi guys, how are you?" > in
# ...
{% endhighlight %}

Simple, da? You can actually stop here and use ii like this. In the next section, we will use some other scripts with ii to make it easier to use.

*NOTE:* To start a query with another user, you would normally `/j user`, but it doesn't work. You must `/j user <initial message>`. There is, however, [a patch][joinuser] for that, too.

## Using ii like a hacker

To allow multiple panes in a single terminal screen, we will use tmux (or you may use screen). Use ii to connect a server, cd into the irc directory, join a channel, etc., wait, you can actually automate that. You can write a script to autojoin some channels. I didn't, but if I did, it would be roughly like this:

{% highlight bash %}
#!/usr/local/bin/zsh
ii -n berk -e ssl -s irc.nixers.net &
cd "~/irc/irc.nixers.net/"
echo "/m nickserv identify hackme" > in
echo "/j #nixers" > in
cd "#nixers/"
tmux new -s "irc"
tail -f out &
tmux splitw -v -p 5 "cat > in"
{% endhighlight %}

If `tail -f out` could be filtered and colored, then it would become a really good alternative as an IRC client, no? Well, for this purpose, I wrote [hiii][hiii], a wrapper for ii to highlight your nick, other people's nicks, URLs, /me actions, etc. Use it like this:

{% highlight bash %}
tail -f out | hiii
{% endhighlight %}

hiii, the Perl wrapper, is only a bunch of regular expression filters. If you're looking for a coding exercise, I would recommend writing a wrapper like hiii; in Perl, awk, Python, etc. for fun. I must say I really enjoyed writing it :)

Now, one tmux pane displays the chat screen, and we create the second pane to send messages to the channel. We can do this by splitting horizontally and adjusting the pane size. Now, we can send messages with `echo "blah" > in`, but I've found `cat > in` to be very handy: you can type your message, and when you hit enter, you can start typing the next one immediately. Some people use Vim to send messages, with keybinds like

{% highlight vim %}
map <leader>ii :.w >> ~/irc/irc.nixers.net/in<CR>dd
map <leader>i1 :.w >> ~/irc/irc.nixers.net/\#nixers/in<CR>dd
map <leader>i2 :.w >> ~/irc/irc.freenode.net/\#math/in<CR>dd
{% endhighlight %}

I used to do that, but I've found it less practical than `cat > in`. However, while using Vim, you can use Ctrl+P for some sort of a "nick-completion" (if you have typed the nick before).

Most guides on the internet use multitail, but I just couldn't do with multitail - when I'd remove the timestamps, my color filters wouldn't work, for example.

Now we have seen the true power of ii. We may proceed to the next section.

## Using ii like an astronaut

The flexibility of ii gives us,

* a natural way of logging the chats (when you kill ii, what you have remaning in `~/irc` are also the log files.
* a protocol for an irc bot (files are easy to read/write to, in programming languages)
* an easier way of piping other programs' outputs to irc
* a possibility of running it on a server and use it as some sort of a bouncer
* and many more other possibilities.

I think ii is really a great IRC client, and a great example of the Unix philosophy. Would recommend.

[ii]: http://tools.suckless.org/ii/
[sic]: http://tools.suckless.org/sic/
[suckless]: http://suckless.org/
[iiscrot]: {{ site.url }}/assets/ii.png
[sslpatch]: http://tools.suckless.org/ii/patches/ssl
[sslpatch2]: http://pub.iotek.org/p/5bKKiaw
[joinuser]: http://tools.suckless.org/ii/patches/joinuser
[hiii]: https://github.com/berkoz/hiii
